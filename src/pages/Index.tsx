import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import Icon from "@/components/ui/icon";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { toast } from "@/hooks/use-toast";

const Index = () => {
  const [activeTab, setActiveTab] = useState("dashboard");
  const [selectedDriver, setSelectedDriver] = useState(null);
  const [showWaybill, setShowWaybill] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [fuelConsumption, setFuelConsumption] = useState({});

  // –°–∏–º—É–ª—è—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    const interval = setInterval(() => {
      const events = [
        { type: 'arrival', driver: '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤', location: '—É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è, 45' },
        { type: 'departure', driver: '–°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤', location: '–ü—Ä–æ–º–∑–æ–Ω–∞, —É—á–∞—Å—Ç–æ–∫ 12' },
        { type: 'loading', driver: '–ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤', location: '–ë–∞–∑–∞' }
      ];
      
      const randomEvent = events[Math.floor(Math.random() * events.length)];
      
      if (Math.random() > 0.7) { // 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = {
          id: Date.now(),
          ...randomEvent,
          time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
        };
        
        setNotifications(prev => [notification, ...prev.slice(0, 4)]);
        
        const messages = {
          arrival: `üöõ ${randomEvent.driver} –ø—Ä–∏–±—ã–ª –Ω–∞ –æ–±—ä–µ–∫—Ç "${randomEvent.location}"`,
          departure: `üöÄ ${randomEvent.driver} –≤—ã–µ—Ö–∞–ª —Å –æ–±—ä–µ–∫—Ç–∞ "${randomEvent.location}"`,
          loading: `‚ö° ${randomEvent.driver} –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –±–∞–∑–µ`
        };
        
        toast({
          title: "GPS –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
          description: messages[randomEvent.type],
          duration: 4000,
        });
      }
    }, 8000);
    
    return () => clearInterval(interval);
  }, []);

  // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞
  const calculateFuelConsumption = (distance, vehicleType) => {
    const fuelRates = {
      '–ö–∞–º–ê–ó –ú–∏–∫—Å–µ—Ä': 25, // –ª/100–∫–º
      '–ö–∞–º–ê–ó –ë–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å': 28,
      '–ö–∞–º–ê–ó –ú–∏–∫—Å–µ—Ä (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π)': 32
    };
    
    const rate = fuelRates[vehicleType] || 25;
    const distanceNum = parseFloat(distance.replace(/[^0-9.]/g, ''));
    return ((distanceNum * rate) / 100).toFixed(1);
  };

  const drivers = [
    { 
      id: 1, 
      name: "–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤", 
      vehicle: "–ö–∞–º–ê–ó –ú–∏–∫—Å–µ—Ä", 
      status: "delivering", 
      distance: "1,245 –∫–º", 
      hours: "8.5 —á", 
      concrete: "15 –º¬≥",
      fuelConsumption: "48.5 –ª",
      fuelCost: "2,425 ‚ÇΩ",
      currentOrder: {
        address: "—É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è, 45",
        startTime: "14:30",
        estimatedReturn: "16:45",
        route: { distance: "12.3 –∫–º", duration: "45 –º–∏–Ω" },
        unloadTime: "30 –º–∏–Ω",
        washTime: "15 –º–∏–Ω"
      },
      location: { lat: 55.7558, lng: 37.6176 }
    },
    { 
      id: 2, 
      name: "–°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤", 
      vehicle: "–ö–∞–º–ê–ó –ë–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å", 
      status: "returning", 
      distance: "987 –∫–º", 
      hours: "7.2 —á", 
      concrete: "25 –º¬≥",
      fuelConsumption: "72.3 –ª",
      fuelCost: "3,615 ‚ÇΩ",
      currentOrder: {
        address: "–ü—Ä–æ–º–∑–æ–Ω–∞, —É—á–∞—Å—Ç–æ–∫ 12",
        startTime: "13:00",
        estimatedReturn: "15:30",
        route: { distance: "8.7 –∫–º", duration: "25 –º–∏–Ω" },
        unloadTime: "45 –º–∏–Ω",
        washTime: "15 –º–∏–Ω"
      },
      location: { lat: 55.7658, lng: 37.6276 }
    },
    { 
      id: 3, 
      name: "–ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤", 
      vehicle: "–ö–∞–º–ê–ó –ú–∏–∫—Å–µ—Ä", 
      status: "available", 
      distance: "1,456 –∫–º", 
      hours: "9.1 —á", 
      concrete: "140 –º¬≥",
      fuelConsumption: "56.2 –ª",
      fuelCost: "2,810 ‚ÇΩ",
      location: { lat: 55.7458, lng: 37.6076 }
    },
    { 
      id: 4, 
      name: "–í–ª–∞–¥–∏–º–∏—Ä –ö–æ–∑–ª–æ–≤", 
      vehicle: "–ö–∞–º–ê–ó –ú–∏–∫—Å–µ—Ä", 
      status: "washing", 
      distance: "743 –∫–º", 
      hours: "6.8 —á", 
      concrete: "78 –º¬≥",
      fuelConsumption: "28.7 –ª",
      fuelCost: "1,435 ‚ÇΩ",
      estimatedAvailable: "15:45",
      location: { lat: 55.7358, lng: 37.5976 }
    },
    { 
      id: 5, 
      name: "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤", 
      vehicle: "–ö–∞–º–ê–ó –ë–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å", 
      status: "loading", 
      distance: "1,123 –∫–º", 
      hours: "8.9 —á", 
      concrete: "18 –º¬≥",
      fuelConsumption: "65.1 –ª",
      fuelCost: "3,255 ‚ÇΩ",
      nextOrder: {
        address: "–ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π, –∫–æ—Ä–ø—É—Å 3",
        scheduledTime: "17:15"
      },
      location: { lat: 55.7258, lng: 37.5876 }
    }
  ];

  const orders = [
    { id: 1, address: "—É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è, 45", concrete: "15 –º¬≥", time: "14:30", status: "active", driver: "–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤", waybillId: "WB001" },
    { id: 2, address: "–ü—Ä–æ–º–∑–æ–Ω–∞, —É—á–∞—Å—Ç–æ–∫ 12", concrete: "25 –º¬≥", time: "16:00", status: "completed", driver: "–°–µ—Ä–≥–µ–π –ü–µ—Ç—Ä–æ–≤", waybillId: "WB002" },
    { id: 3, address: "–ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π, –∫–æ—Ä–ø—É—Å 3", concrete: "18 –º¬≥", time: "17:15", status: "pending", driver: "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤", waybillId: "WB003" }
  ];

  const getStatusColor = (status) => {
    switch (status) {
      case "available": return "bg-green-600";
      case "delivering": return "bg-blue-600";
      case "returning": return "bg-orange-600";
      case "loading": return "bg-purple-600";
      case "washing": return "bg-cyan-600";
      default: return "bg-gray-600";
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case "available": return "–°–≤–æ–±–æ–¥–µ–Ω";
      case "delivering": return "–í –ø—É—Ç–∏";
      case "returning": return "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è";
      case "loading": return "–ó–∞–≥—Ä—É–∑–∫–∞";
      case "washing": return "–ú–æ–π–∫–∞";
      default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <Icon name="Truck" className="text-blue-600" size={32} />
              <h1 className="text-2xl font-bold text-gray-900">–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h1>
            </div>
            <div className="flex items-center space-x-4">
              <div className="relative">
                <Button variant="outline" size="sm">
                  <Icon name="Bell" size={16} className="mr-2" />
                  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  {notifications.length > 0 && (
                    <Badge className="absolute -top-2 -right-2 px-1 min-w-[1.2rem] h-5 bg-red-500 text-white text-xs">
                      {notifications.length}
                    </Badge>
                  )}
                </Button>
              </div>
              <Avatar>
                <AvatarFallback>–û–ü</AvatarFallback>
              </Avatar>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Navigation Tabs */}
        <div className="flex space-x-1 mb-8 bg-gray-100 p-1 rounded-lg w-fit">
          <Button 
            variant={activeTab === "dashboard" ? "default" : "ghost"}
            onClick={() => setActiveTab("dashboard")}
            className="text-sm"
          >
            <Icon name="BarChart3" size={16} className="mr-2" />
            –î–∞—à–±–æ—Ä–¥
          </Button>
          <Button 
            variant={activeTab === "orders" ? "default" : "ghost"}
            onClick={() => setActiveTab("orders")}
            className="text-sm"
          >
            <Icon name="ClipboardList" size={16} className="mr-2" />
            –ó–∞–∫–∞–∑—ã
          </Button>
          <Button 
            variant={activeTab === "drivers" ? "default" : "ghost"}
            onClick={() => setActiveTab("drivers")}
            className="text-sm"
          >
            <Icon name="Users" size={16} className="mr-2" />
            –í–æ–¥–∏—Ç–µ–ª–∏
          </Button>
          <Button 
            variant={activeTab === "fuel" ? "default" : "ghost"}
            onClick={() => setActiveTab("fuel")}
            className="text-sm"
          >
            <Icon name="Fuel" size={16} className="mr-2" />
            –¢–æ–ø–ª–∏–≤–æ
          </Button>
        </div>

        {activeTab === "dashboard" && (
          <div className="space-y-6">
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</p>
                      <p className="text-3xl font-bold text-blue-600">8</p>
                    </div>
                    <Icon name="ClipboardCheck" className="text-blue-600" size={24} />
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–í–æ–¥–∏—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω</p>
                      <p className="text-3xl font-bold text-green-600">4/5</p>
                    </div>
                    <Icon name="UserCheck" className="text-green-600" size={24} />
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞</p>
                      <p className="text-3xl font-bold text-orange-600">271–ª</p>
                    </div>
                    <Icon name="Fuel" className="text-orange-600" size={24} />
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–û–±—â–∏–π –ø—Ä–æ–±–µ–≥</p>
                      <p className="text-3xl font-bold text-purple-600">1,245–∫–º</p>
                    </div>
                    <Icon name="Route" className="text-purple-600" size={24} />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Notifications Panel */}
            {notifications.length > 0 && (
              <Card className="border-l-4 border-l-blue-600 bg-blue-50">
                <CardHeader>
                  <CardTitle className="flex items-center text-blue-800">
                    <Icon name="Bell" className="mr-2" size={20} />
                    –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {notifications.slice(0, 3).map(notification => (
                      <div key={notification.id} className="flex items-center justify-between p-2 bg-white rounded">
                        <div className="flex items-center space-x-3">
                          <div className={`w-2 h-2 rounded-full ${
                            notification.type === 'arrival' ? 'bg-green-500' : 
                            notification.type === 'departure' ? 'bg-orange-500' : 'bg-blue-500'
                          }`}></div>
                          <span className="text-sm">{notification.driver} - {notification.location}</span>
                        </div>
                        <span className="text-xs text-gray-500">{notification.time}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Main Content */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Quick Order Form */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Icon name="Plus" className="mr-2" size={20} />
                    –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Input placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏" />
                  <div className="grid grid-cols-2 gap-4">
                    <Input placeholder="–û–±—ä–µ–º (–º¬≥)" type="number" />
                    <Input placeholder="–í—Ä–µ–º—è" type="time" />
                  </div>
                  <Textarea placeholder="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" rows={3} />
                  <Button className="w-full bg-blue-600 hover:bg-blue-700">
                    <Icon name="Send" size={16} className="mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –≤–æ–¥–∏—Ç–µ–ª—è–º
                  </Button>
                </CardContent>
              </Card>

              {/* Vehicle Preview */}
              <Card>
                <CardHeader>
                  <CardTitle>–ê–≤—Ç–æ–ø–∞—Ä–∫</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-center">
                    <img 
                      src="/img/d72578bd-9889-48af-97d0-be20d6459227.jpg" 
                      alt="–ö–∞–º–ê–ó –ë–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∞" 
                      className="w-full h-48 object-cover rounded-lg mb-4"
                    />
                    <p className="text-sm text-gray-600">–ö–∞–º–ê–ó - –æ—Å–Ω–æ–≤–∞ –Ω–∞—à–µ–≥–æ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {activeTab === "fuel" && (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ø–ª–∏–≤–∞</h2>
              <div className="flex space-x-2">
                <Button variant="outline">
                  <Icon name="Download" size={16} className="mr-2" />
                  –≠–∫—Å–ø–æ—Ä—Ç
                </Button>
                <Button className="bg-blue-600 hover:bg-blue-700">
                  <Icon name="Plus" size={16} className="mr-2" />
                  –ó–∞–ø—Ä–∞–≤–∫–∞
                </Button>
              </div>
            </div>

            {/* Fuel Stats */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–†–∞—Å—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è</p>
                      <p className="text-3xl font-bold text-red-600">271–ª</p>
                      <p className="text-sm text-gray-500">‚ÇΩ13,540</p>
                    </div>
                    <Icon name="TrendingUp" className="text-red-600" size={24} />
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥</p>
                      <p className="text-3xl font-bold text-blue-600">26.8–ª</p>
                      <p className="text-sm text-gray-500">–Ω–∞ 100–∫–º</p>
                    </div>
                    <Icon name="Gauge" className="text-blue-600" size={24} />
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–≠–∫–æ–Ω–æ–º–∏—è</p>
                      <p className="text-3xl font-bold text-green-600">-8%</p>
                      <p className="text-sm text-gray-500">vs –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü</p>
                    </div>
                    <Icon name="TrendingDown" className="text-green-600" size={24} />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Drivers Fuel Table */}
            <Card>
              <CardHeader>
                <CardTitle>–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {drivers.map(driver => (
                    <div key={driver.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                      <div className="flex items-center space-x-4">
                        <Avatar>
                          <AvatarFallback>{driver.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                        </Avatar>
                        <div>
                          <h4 className="font-medium">{driver.name}</h4>
                          <p className="text-sm text-gray-600">{driver.vehicle}</p>
                        </div>
                      </div>
                      <div className="grid grid-cols-4 gap-6 text-right">
                        <div>
                          <p className="text-sm text-gray-600">–ü—Ä–æ–±–µ–≥</p>
                          <p className="font-medium">{driver.distance}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">–¢–æ–ø–ª–∏–≤–æ</p>
                          <p className="font-medium text-orange-600">{driver.fuelConsumption}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">–°—Ç–æ–∏–º–æ—Å—Ç—å</p>
                          <p className="font-medium text-red-600">{driver.fuelCost}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">–†–∞—Å—Ö–æ–¥</p>
                          <p className="font-medium">{((parseFloat(driver.fuelConsumption) / parseFloat(driver.distance.replace(/[^0-9.]/g, ''))) * 100).toFixed(1)}–ª/100–∫–º</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Fuel Cards */}
            <Card>
              <CardHeader>
                <CardTitle>–¢–æ–ø–ª–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div className="p-4 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg text-white">
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <p className="text-sm opacity-90">–õ—É–∫–æ–π–ª</p>
                        <p className="text-lg font-bold">**** 3456</p>
                      </div>
                      <Icon name="CreditCard" size={24} />
                    </div>
                    <div className="space-y-1">
                      <p className="text-sm opacity-90">–ë–∞–ª–∞–Ω—Å: 45,230 ‚ÇΩ</p>
                      <p className="text-xs opacity-75">–õ–∏–º–∏—Ç: 100,000 ‚ÇΩ</p>
                    </div>
                  </div>
                  
                  <div className="p-4 bg-gradient-to-r from-green-500 to-green-600 rounded-lg text-white">
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <p className="text-sm opacity-90">–†–æ—Å–Ω–µ—Ñ—Ç—å</p>
                        <p className="text-lg font-bold">**** 7890</p>
                      </div>
                      <Icon name="CreditCard" size={24} />
                    </div>
                    <div className="space-y-1">
                      <p className="text-sm opacity-90">–ë–∞–ª–∞–Ω—Å: 67,850 ‚ÇΩ</p>
                      <p className="text-xs opacity-75">–õ–∏–º–∏—Ç: 150,000 ‚ÇΩ</p>
                    </div>
                  </div>
                  
                  <div className="p-4 bg-gradient-to-r from-orange-500 to-orange-600 rounded-lg text-white">
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <p className="text-sm opacity-90">–ì–∞–∑–ø—Ä–æ–º</p>
                        <p className="text-lg font-bold">**** 1234</p>
                      </div>
                      <Icon name="CreditCard" size={24} />
                    </div>
                    <div className="space-y-1">
                      <p className="text-sm opacity-90">–ë–∞–ª–∞–Ω—Å: 28,640 ‚ÇΩ</p>
                      <p className="text-xs opacity-75">–õ–∏–º–∏—Ç: 80,000 ‚ÇΩ</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {activeTab === "drivers" && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {drivers.map(driver => (
                <Card key={driver.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg">{driver.name}</CardTitle>
                      <Badge className={getStatusColor(driver.status)}>
                        {getStatusText(driver.status)}
                      </Badge>
                    </div>
                    <p className="text-sm text-gray-600">{driver.vehicle}</p>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between text-sm">
                        <span className="flex items-center">
                          <Icon name="MapPin" size={14} className="mr-1 text-blue-600" />
                          –ü—Ä–æ–±–µ–≥
                        </span>
                        <span className="font-medium">{driver.distance}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="flex items-center">
                          <Icon name="Clock" size={14} className="mr-1 text-orange-600" />
                          –ß–∞—Å—ã
                        </span>
                        <span className="font-medium">{driver.hours}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="flex items-center">
                          <Icon name="Package" size={14} className="mr-1 text-green-600" />
                          –ë–µ—Ç–æ–Ω
                        </span>
                        <span className="font-medium">{driver.concrete}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="flex items-center">
                          <Icon name="Fuel" size={14} className="mr-1 text-red-600" />
                          –¢–æ–ø–ª–∏–≤–æ
                        </span>
                        <span className="font-medium">{driver.fuelConsumption}</span>
                      </div>
                      
                      {driver.currentOrder && (
                        <>
                          <Separator className="my-3" />
                          <div className="bg-blue-50 p-3 rounded-lg">
                            <h5 className="font-medium text-sm mb-2 text-blue-800">–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:</h5>
                            <p className="text-xs text-blue-700 mb-1">{driver.currentOrder.address}</p>
                            <div className="flex justify-between text-xs">
                              <span>–û–±—ä–µ–º: {driver.concrete}</span>
                              <span className="font-medium text-green-600">‚Ü© {driver.currentOrder.estimatedReturn}</span>
                            </div>
                          </div>
                        </>
                      )}
                      
                      {driver.estimatedAvailable && (
                        <div className="bg-cyan-50 p-2 rounded text-xs text-center">
                          <span className="text-cyan-700">–ë—É–¥–µ—Ç —Å–≤–æ–±–æ–¥–µ–Ω: {driver.estimatedAvailable}</span>
                        </div>
                      )}
                      
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="w-full mt-4"
                        onClick={() => setSelectedDriver(driver)}
                      >
                        <Icon name="MapPin" size={14} className="mr-2" />
                        –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {activeTab === "orders" && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {orders.map(order => (
                    <div key={order.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                      <div className="flex-1">
                        <h4 className="font-medium">{order.address}</h4>
                        <p className="text-sm text-gray-600">–û–±—ä–µ–º: {order.concrete} ‚Ä¢ –í—Ä–µ–º—è: {order.time} ‚Ä¢ –í–æ–¥–∏—Ç–µ–ª—å: {order.driver}</p>
                      </div>
                      <div className="flex items-center space-x-3">
                        <Badge 
                          variant={order.status === "active" ? "default" : 
                                  order.status === "pending" ? "secondary" : "outline"}
                          className={order.status === "active" ? "bg-blue-600" : 
                                    order.status === "completed" ? "bg-green-600" : ""}
                        >
                          {order.status === "active" ? "–í —Ä–∞–±–æ—Ç–µ" : 
                           order.status === "pending" ? "–û–∂–∏–¥–∞–µ—Ç" : "–í—ã–ø–æ–ª–Ω–µ–Ω"}
                        </Badge>
                        <Button variant="outline" size="sm">
                          <Icon name="MapPin" size={14} className="mr-1" />
                          –¢—Ä–µ–∫
                        </Button>
                        <Button variant="outline" size="sm">
                          <Icon name="FileText" size={14} className="mr-1" />
                          –ù–∞–∫–ª–∞–¥–Ω–∞—è
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};

export default Index;